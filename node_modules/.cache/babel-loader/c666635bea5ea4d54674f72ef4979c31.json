{"ast":null,"code":"var _jsxFileName = \"/Users/fuhong/project/react/Sorting_Visualizer/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\nimport { getMergeSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\n/* TODO:\n\n1. sorting time\n2. reset to origin array\n3. Change algorithms into drop-down list\n4. create setting drop-down list - set length, set speed.\n5. interrupt - stop, step, continue\n\n*/\n// Array Setting\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_LENGTH = 50;\nconst LIMIT_LENGTH = 150;\nconst ARRAY_SCALE = 12;\nconst RAND_MIN = 5;\nconst RAND_MAX = 400;\nconst DEFAULT_SPEED = 1; // Collor Setting\n// const PRIMARY_COLOR = \"#3537F2\";\n\nconst CONFIRM_COLOR = '#27AE60';\nconst SECONDARY_COLOR = \"#FFBF00\";\nconst ORIGINAL_COLOR = \"#6495ED\"; // Merge Sort Parameter\n\nconst SHOW_BOUNDARY = 0;\nconst MERGING = 1;\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      length: DEFAULT_LENGTH,\n      speed: DEFAULT_SPEED\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  componentWillUnmount() {\n    this.setState = () => false;\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimation(this.state.array);\n    console.log([animations]);\n    let pre_status = null;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [idx, val, startIdx, midIdx, endIdx, status] = animations[i];\n      setTimeout(() => {\n        console.log(animations[i]);\n\n        if (status === SHOW_BOUNDARY) {\n          const start_style = arrayBars[startIdx].style;\n          const mid_style = arrayBars[midIdx].style;\n          const end_style = arrayBars[endIdx].style;\n          [start_style, mid_style, end_style].map(style => {\n            style.backgroundColor = SECONDARY_COLOR;\n          }); // setTimeout(() => {\n          //     [start_style, mid_style, end_style].map((style) => {\n          //         style.backgroundColor = SECONDARY_COLOR;\n          //     })\n          // }, i * this.state.speed);\n        } // else if (status === MERGING) {\n        //     const idx_style = arrayBars[idx].style;\n        //     if (pre_status[5] === SHOW_BOUNDARY) {\n        //         arrayBars[pre_status[2]].style.backgroundColor = ORIGINAL_COLOR;\n        //         arrayBars[pre_status[3]].style.backgroundColor = ORIGINAL_COLOR;\n        //         arrayBars[pre_status[4]].style.backgroundColor = ORIGINAL_COLOR;\n        //     }\n        //     idx_style.backgroundColor = CONFIRM_COLOR;\n        //     idx_style.height = `${val/ARRAY_SCALE}vw`;\n        // setTimeout(() => {\n        //     if (pre_status[5] === SHOW_BOUNDARY) {\n        //         arrayBars[pre_status[2]].style.backgroundColor = ORIGINAL_COLOR;\n        //         arrayBars[pre_status[3]].style.backgroundColor = ORIGINAL_COLOR;\n        //         arrayBars[pre_status[4]].style.backgroundColor = ORIGINAL_COLOR;\n        //     }\n        //     idx_style.backgroundColor = CONFIRM_COLOR;\n        //     idx_style.height = `${val/ARRAY_SCALE}vw`;\n        // }, i * this.state.speed);\n        // }\n\n\n        pre_status = animations[i];\n      }, i * this.state.speed);\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimation(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, oneVal, twoVal, finish] = animations[i];\n\n      if (finish === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = CONFIRM_COLOR;\n        }, i * this.state.speed);\n      } else {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = ORIGINAL_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n\n          if (oneVal > twoVal) {\n            barOneStyle.height = `${twoVal / ARRAY_SCALE}vw`;\n            barTwoStyle.height = `${oneVal / ARRAY_SCALE}vw`;\n          }\n        }, i * this.state.speed);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      array.push(randomNum(RAND_MIN, RAND_MAX));\n    }\n\n    this.setState({\n      array: array\n    });\n    this.resetColor();\n  }\n\n  resetColor() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = ORIGINAL_COLOR;\n    }\n  }\n\n  handleChange(event) {\n    let length = event.target.value;\n    length = length > LIMIT_LENGTH ? LIMIT_LENGTH : length;\n    this.setState({\n      length: length\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.resetArray();\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    const styles = {\n      input_style: {\n        width: \"20%\",\n        border: \"solid 0.2vw #ffc13b\",\n        fontSize: \"1.3vw\",\n        height: \"1.7vw\",\n        marginRight: \"0.3vw\"\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo text\",\n          children: \"Sorting Visualizer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setting-container\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form\",\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: styles.input_style,\n              type: \"text\",\n              value: this.state.length,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"btn text\",\n              type: \"submit\",\n              value: \"Set Length\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"algo-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn text\",\n            onClick: () => this.resetArray(),\n            children: \"New Array\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn text\",\n            onClick: () => this.mergeSort(),\n            children: \"Merge Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn text\",\n            onClick: () => this.bubbleSort(),\n            children: \"Bubble Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn text\",\n            onClick: () => this.quickSort(),\n            children: \"Quick Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${value / ARRAY_SCALE}vw`,\n            backgroundColor: ORIGINAL_COLOR\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-container text\",\n        children: \"Result Container Placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/Users/fuhong/project/react/Sorting_Visualizer/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getBubbleSortAnimation","getMergeSortAnimation","DEFAULT_LENGTH","LIMIT_LENGTH","ARRAY_SCALE","RAND_MIN","RAND_MAX","DEFAULT_SPEED","CONFIRM_COLOR","SECONDARY_COLOR","ORIGINAL_COLOR","SHOW_BOUNDARY","MERGING","SortingVisualizer","Component","constructor","props","state","array","length","speed","handleChange","bind","handleSubmit","componentDidMount","resetArray","componentWillUnmount","setState","mergeSort","animations","console","log","pre_status","i","arrayBars","document","getElementsByClassName","idx","val","startIdx","midIdx","endIdx","status","setTimeout","start_style","style","mid_style","end_style","map","backgroundColor","bubbleSort","barOneIdx","barTwoIdx","oneVal","twoVal","finish","barOneStyle","barTwoStyle","height","quickSort","push","randomNum","resetColor","event","target","value","preventDefault","render","styles","input_style","width","border","fontSize","marginRight","min","max","Math","floor","random"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,SAASC,sBAAT,QAAuC,4CAAvC;AACA,SAASC,qBAAT,QAAsC,4CAAtC;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,YAAY,GAAG,GAArB;AACA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GAAG,CAAjB;AACA,MAAMC,QAAQ,GAAG,GAAjB;AACA,MAAMC,aAAa,GAAG,CAAtB,C,CAEA;AACA;;AACA,MAAMC,aAAa,GAAG,SAAtB;AACA,MAAMC,eAAe,GAAG,SAAxB;AACA,MAAMC,cAAc,GAAG,SAAvB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,CAAtB;AACA,MAAMC,OAAO,GAAG,CAAhB;AAGA,eAAe,MAAMC,iBAAN,SAAgCd,KAAK,CAACe,SAAtC,CAAgD;AAC3DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,MAAM,EAAEjB,cAFC;AAGTkB,MAAAA,KAAK,EAAEb;AAHE,KAAb;AAMA,SAAKc,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDE,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB,SAAKC,QAAL,GAAgB,MAAM,KAAtB;AACH;;AAEDC,EAAAA,SAAS,GAAE;AACP,UAAMC,UAAU,GAAG5B,qBAAqB,CAAC,KAAKgB,KAAL,CAAWC,KAAZ,CAAxC;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,UAAD,CAAZ;AACA,QAAIG,UAAU,GAAG,IAAjB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACV,MAA/B,EAAuCc,CAAC,EAAxC,EAA4C;AACxC,YAAMC,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAM,CAACC,GAAD,EAAMC,GAAN,EAAWC,QAAX,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,MAArC,IAA+Cb,UAAU,CAACI,CAAD,CAA/D;AAGAU,MAAAA,UAAU,CAAC,MAAM;AACbb,QAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACI,CAAD,CAAtB;;AACA,YAAIS,MAAM,KAAK/B,aAAf,EAA8B;AAC1B,gBAAMiC,WAAW,GAAGV,SAAS,CAACK,QAAD,CAAT,CAAoBM,KAAxC;AACA,gBAAMC,SAAS,GAAGZ,SAAS,CAACM,MAAD,CAAT,CAAkBK,KAApC;AACA,gBAAME,SAAS,GAAGb,SAAS,CAACO,MAAD,CAAT,CAAkBI,KAApC;AAGA,WAACD,WAAD,EAAcE,SAAd,EAAyBC,SAAzB,EAAoCC,GAApC,CAAyCH,KAAD,IAAW;AAC/CA,YAAAA,KAAK,CAACI,eAAN,GAAwBxC,eAAxB;AACH,WAFD,EAN0B,CAW1B;AACA;AACA;AACA;AACA;AAEH,SAnBY,CAoBb;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;;AACAuB,QAAAA,UAAU,GAAGH,UAAU,CAACI,CAAD,CAAvB;AACH,OA3CS,EA2CPA,CAAC,GAAG,KAAKhB,KAAL,CAAWG,KA3CR,CAAV;AA4CH;AACJ;;AAED8B,EAAAA,UAAU,GAAE;AACR,UAAMrB,UAAU,GAAG7B,sBAAsB,CAAC,KAAKiB,KAAL,CAAWC,KAAZ,CAAzC;;AAEA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACV,MAA/B,EAAuCc,CAAC,EAAxC,EAA4C;AACxC,YAAMC,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAM,CAACe,SAAD,EAAYC,SAAZ,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,MAAvC,IAAiD1B,UAAU,CAACI,CAAD,CAAjE;;AAEA,UAAIsB,MAAM,KAAK,CAAf,EAAkB;AACd,cAAMC,WAAW,GAAGtB,SAAS,CAACiB,SAAD,CAAT,CAAqBN,KAAzC;AACAF,QAAAA,UAAU,CAAC,MAAM;AACba,UAAAA,WAAW,CAACP,eAAZ,GAA8BzC,aAA9B;AACH,SAFS,EAEPyB,CAAC,GAAG,KAAKhB,KAAL,CAAWG,KAFR,CAAV;AAGH,OALD,MAMK;AACD,cAAMoC,WAAW,GAAGtB,SAAS,CAACiB,SAAD,CAAT,CAAqBN,KAAzC;AACA,cAAMY,WAAW,GAAGvB,SAAS,CAACkB,SAAD,CAAT,CAAqBP,KAAzC;AAEAF,QAAAA,UAAU,CAAC,MAAM;AACba,UAAAA,WAAW,CAACP,eAAZ,GAA8BvC,cAA9B;AACA+C,UAAAA,WAAW,CAACR,eAAZ,GAA8BxC,eAA9B;;AAEA,cAAI4C,MAAM,GAAGC,MAAb,EAAqB;AACjBE,YAAAA,WAAW,CAACE,MAAZ,GAAsB,GAAEJ,MAAM,GAAClD,WAAY,IAA3C;AACAqD,YAAAA,WAAW,CAACC,MAAZ,GAAsB,GAAEL,MAAM,GAACjD,WAAY,IAA3C;AACH;AACJ,SARS,EAQP6B,CAAC,GAAG,KAAKhB,KAAL,CAAWG,KARR,CAAV;AAUH;AACJ;AACJ;;AAEDuC,EAAAA,SAAS,GAAE,CAAE;;AAEblC,EAAAA,UAAU,GAAG;AACT,UAAMP,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhB,KAAL,CAAWE,MAA/B,EAAuCc,CAAC,EAAxC,EAA4C;AACxCf,MAAAA,KAAK,CAAC0C,IAAN,CAAWC,SAAS,CAACxD,QAAD,EAAWC,QAAX,CAApB;AACH;;AACD,SAAKqB,QAAL,CAAc;AAACT,MAAAA,KAAK,EAAEA;AAAR,KAAd;AACA,SAAK4C,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAM5B,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;;AACA,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACf,MAA9B,EAAsCc,CAAC,EAAvC,EAA2C;AACvCC,MAAAA,SAAS,CAACD,CAAD,CAAT,CAAaY,KAAb,CAAmBI,eAAnB,GAAqCvC,cAArC;AACH;AACJ;;AAEDW,EAAAA,YAAY,CAAC0C,KAAD,EAAQ;AAChB,QAAI5C,MAAM,GAAG4C,KAAK,CAACC,MAAN,CAAaC,KAA1B;AACA9C,IAAAA,MAAM,GAAGA,MAAM,GAAGhB,YAAT,GAAwBA,YAAxB,GAAuCgB,MAAhD;AACA,SAAKQ,QAAL,CAAc;AAACR,MAAAA,MAAM,EAAEA;AAAT,KAAd;AACH;;AACDI,EAAAA,YAAY,CAACwC,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAACG,cAAN;AACA,SAAKzC,UAAL;AACH;;AAED0C,EAAAA,MAAM,GAAG;AACL,UAAM;AAACjD,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACA,UAAMmD,MAAM,GAAG;AACXC,MAAAA,WAAW,EAAE;AACTC,QAAAA,KAAK,EAAE,KADE;AAETC,QAAAA,MAAM,EAAE,qBAFC;AAGTC,QAAAA,QAAQ,EAAE,OAHD;AAITd,QAAAA,MAAM,EAAE,OAJC;AAKTe,QAAAA,WAAW,EAAE;AALJ;AADF,KAAf;AAUA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,mBAAf;AAAA,iCACI;AAAM,YAAA,SAAS,EAAC,MAAhB;AAAuB,YAAA,QAAQ,EAAE,KAAKlD,YAAtC;AAAA,oCACI;AAAO,cAAA,KAAK,EAAE6C,MAAM,CAACC,WAArB;AAAkC,cAAA,IAAI,EAAC,MAAvC;AAA8C,cAAA,KAAK,EAAE,KAAKpD,KAAL,CAAWE,MAAhE;AAAwE,cAAA,QAAQ,EAAE,KAAKE;AAAvF;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,SAAS,EAAC,UAAjB;AAA4B,cAAA,IAAI,EAAC,QAAjC;AAA0C,cAAA,KAAK,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAQI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACI;AAAQ,YAAA,SAAS,EAAC,UAAlB;AAA6B,YAAA,OAAO,EAAE,MAAM,KAAKI,UAAL,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,SAAS,EAAC,UAAlB;AAA6B,YAAA,OAAO,EAAE,MAAM,KAAKG,SAAL,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,SAAS,EAAC,UAAlB;AAA6B,YAAA,OAAO,EAAE,MAAM,KAAKsB,UAAL,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAQ,YAAA,SAAS,EAAC,UAAlB;AAA6B,YAAA,OAAO,EAAE,MAAM,KAAKS,SAAL,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAgBI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBACKzC,KAAK,CAAC8B,GAAN,CAAU,CAACiB,KAAD,EAAQ5B,GAAR,kBACP;AACI,UAAA,SAAS,EAAC,WADd;AAGI,UAAA,KAAK,EAAE;AACHqB,YAAAA,MAAM,EAAG,GAAEO,KAAK,GAAC7D,WAAY,IAD1B;AAEH6C,YAAAA,eAAe,EAAEvC;AAFd;AAHX,WAES2B,GAFT;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAhBJ,eA4BI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAkCH;;AAxL0D;;AA4L/D,SAASwB,SAAT,CAAmBa,GAAnB,EAAwBC,GAAxB,EAA6B;AACzB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\nimport { getMergeSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\n\n\n\n/* TODO:\n\n1. sorting time\n2. reset to origin array\n3. Change algorithms into drop-down list\n4. create setting drop-down list - set length, set speed.\n5. interrupt - stop, step, continue\n\n*/\n\n// Array Setting\nconst DEFAULT_LENGTH = 50;\nconst LIMIT_LENGTH = 150;\nconst ARRAY_SCALE = 12;\nconst RAND_MIN = 5;\nconst RAND_MAX = 400;\nconst DEFAULT_SPEED = 1;\n\n// Collor Setting\n// const PRIMARY_COLOR = \"#3537F2\";\nconst CONFIRM_COLOR = '#27AE60';\nconst SECONDARY_COLOR = \"#FFBF00\";\nconst ORIGINAL_COLOR = \"#6495ED\";\n\n// Merge Sort Parameter\nconst SHOW_BOUNDARY = 0;\nconst MERGING = 1;\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            array: [],\n            length: DEFAULT_LENGTH,\n            speed: DEFAULT_SPEED,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    componentWillUnmount() {\n        this.setState = () => false;\n    }\n\n    mergeSort(){\n        const animations = getMergeSortAnimation(this.state.array)\n        console.log([animations])\n        let pre_status = null;\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [idx, val, startIdx, midIdx, endIdx, status] = animations[i];\n\n\n            setTimeout(() => {\n                console.log(animations[i])\n                if (status === SHOW_BOUNDARY) {\n                    const start_style = arrayBars[startIdx].style;\n                    const mid_style = arrayBars[midIdx].style;\n                    const end_style = arrayBars[endIdx].style;\n\n\n                    [start_style, mid_style, end_style].map((style) => {\n                        style.backgroundColor = SECONDARY_COLOR;\n                    })\n\n                    \n                    // setTimeout(() => {\n                    //     [start_style, mid_style, end_style].map((style) => {\n                    //         style.backgroundColor = SECONDARY_COLOR;\n                    //     })\n                    // }, i * this.state.speed);\n                    \n                }\n                // else if (status === MERGING) {\n                //     const idx_style = arrayBars[idx].style;\n\n                //     if (pre_status[5] === SHOW_BOUNDARY) {\n                //         arrayBars[pre_status[2]].style.backgroundColor = ORIGINAL_COLOR;\n                //         arrayBars[pre_status[3]].style.backgroundColor = ORIGINAL_COLOR;\n                //         arrayBars[pre_status[4]].style.backgroundColor = ORIGINAL_COLOR;\n                //     }\n                //     idx_style.backgroundColor = CONFIRM_COLOR;\n                //     idx_style.height = `${val/ARRAY_SCALE}vw`;\n\n                    \n                    // setTimeout(() => {\n                    //     if (pre_status[5] === SHOW_BOUNDARY) {\n                    //         arrayBars[pre_status[2]].style.backgroundColor = ORIGINAL_COLOR;\n                    //         arrayBars[pre_status[3]].style.backgroundColor = ORIGINAL_COLOR;\n                    //         arrayBars[pre_status[4]].style.backgroundColor = ORIGINAL_COLOR;\n                    //     }\n                    //     idx_style.backgroundColor = CONFIRM_COLOR;\n                    //     idx_style.height = `${val/ARRAY_SCALE}vw`;\n                    // }, i * this.state.speed);\n                // }\n                pre_status = animations[i];\n            }, i * this.state.speed);\n        }\n    }\n\n    bubbleSort(){\n        const animations = getBubbleSortAnimation(this.state.array)\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [barOneIdx, barTwoIdx, oneVal, twoVal, finish] = animations[i];\n\n            if (finish === 1) {\n                const barOneStyle = arrayBars[barOneIdx].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = CONFIRM_COLOR;\n                }, i * this.state.speed);\n            }\n            else {\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = ORIGINAL_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                    \n                    if (oneVal > twoVal) {\n                        barOneStyle.height = `${twoVal/ARRAY_SCALE}vw`;\n                        barTwoStyle.height = `${oneVal/ARRAY_SCALE}vw`;\n                    }\n                }, i * this.state.speed);\n\n            }\n        }\n    }\n\n    quickSort(){}\n\n    resetArray() {\n        const array = []\n        for (let i = 0; i < this.state.length; i++) {\n            array.push(randomNum(RAND_MIN, RAND_MAX));\n        }\n        this.setState({array: array});\n        this.resetColor();\n    }\n\n    resetColor() {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = ORIGINAL_COLOR;\n        }\n    }\n\n    handleChange(event) {\n        let length = event.target.value;\n        length = length > LIMIT_LENGTH ? LIMIT_LENGTH : length;\n        this.setState({length: length});\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        this.resetArray();\n    }\n\n    render() {\n        const {array} = this.state\n        const styles = {\n            input_style: {\n                width: \"20%\",\n                border: \"solid 0.2vw #ffc13b\",\n                fontSize: \"1.3vw\",\n                height: \"1.7vw\",\n                marginRight: \"0.3vw\"\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"nav-bar\">\n                    <div className=\"logo text\">Sorting Visualizer</div>\n                    <div className=\"setting-container\">\n                        <form className=\"form\" onSubmit={this.handleSubmit}>\n                            <input style={styles.input_style} type=\"text\" value={this.state.length} onChange={this.handleChange}/>\n                            <input className=\"btn text\" type=\"submit\" value=\"Set Length\"/>\n                        </form>\n                    </div>\n                    <div className=\"algo-container\">\n                        <button className=\"btn text\" onClick={() => this.resetArray()}>New Array</button>\n                        <button className=\"btn text\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                        <button className=\"btn text\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                        <button className=\"btn text\" onClick={() => this.quickSort()}>Quick Sort</button>\n                    </div>\n                </div>\n                <div className=\"array-container\">\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                                height: `${value/ARRAY_SCALE}vw`,\n                                backgroundColor: ORIGINAL_COLOR,\n                            }}>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"result-container text\">\n                    Result Container Placeholder\n                </div>\n            </div>\n        );\n    }\n  \n}\n\nfunction randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}"]},"metadata":{},"sourceType":"module"}