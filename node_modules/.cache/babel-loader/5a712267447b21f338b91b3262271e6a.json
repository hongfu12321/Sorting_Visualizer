{"ast":null,"code":"var _jsxFileName = \"/Users/fuhong/project/react/Sorting_Visualizer/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\n/* TODO:\n\n1. sorting time\n2. reset to origin array\n3. Change algorithms into drop-down list\n4. create setting drop-down list - set length, set speed.\n5. interrupt - stop, step, continue\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAUL_LENGTH = 20;\nconst LIMIT_LENGTH = 150;\nconst RAND_MIN = 5;\nconst RAND_MAX = 400;\nconst ANIMATE_SPEED = 5;\nconst CONFIRM_COLOR = '#27AE60'; // const PRIMARY_COLOR = \"#3537F2\";\n\nconst SECONDARY_COLOR = \"#FFBF00\";\nconst ORIGINAL_COLOR = \"#6495ED\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      length: DEFAUL_LENGTH\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  componentWillUnmount() {\n    this.setState = () => false;\n  }\n\n  mergeSort() {\n    for (let i = 0; i < 10; i++) {\n      setTimeout(() => {\n        this.resetArray();\n      }, ANIMATE_SPEED * i); // console.log(this.state.array)\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimation(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, oneVal, twoVal, finish] = animations[i];\n\n      if (finish === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = CONFIRM_COLOR;\n        }, i * ANIMATE_SPEED);\n      } else {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = ORIGINAL_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n\n          if (oneVal > twoVal) {\n            barOneStyle.height = `${twoVal / 10}vw`;\n            barTwoStyle.height = `${oneVal / 10}vw`;\n          }\n        }, i * ANIMATE_SPEED);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      array.push(randomNum(RAND_MIN, RAND_MAX));\n    }\n\n    this.setState({\n      array: array\n    });\n    this.resetColor();\n  }\n\n  resetColor() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = ORIGINAL_COLOR;\n    }\n  }\n\n  handleChange(event) {\n    let length = event.target.value;\n    length = length > LIMIT_LENGTH ? LIMIT_LENGTH : length;\n    this.setState({\n      length: length\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.resetArray();\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    const styles = {\n      input_style: {\n        width: \"20%\",\n        border: \"solid 0.2vw #ffc13b\",\n        fontSize: \"1.3vw\",\n        height: \"1.7vw\",\n        marginRight: \"0.3vw\"\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo text\",\n          children: \"Sorting Visualizer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setting-container\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form\",\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: styles.input_style,\n              type: \"text\",\n              value: this.state.length,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"btn text\",\n              type: \"submit\",\n              value: \"Set Length\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"algo-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn text\",\n            onClick: () => this.resetArray(),\n            children: \"New Array\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn text\",\n            onClick: () => this.mergeSort(),\n            children: \"Merge Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn text\",\n            onClick: () => this.bubbleSort(),\n            children: \"Bubble Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn text\",\n            onClick: () => this.quickSort(),\n            children: \"Quick Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${value / 10}vw`,\n            backgroundColor: ORIGINAL_COLOR\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-container\",\n        children: \"Result Container Placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/Users/fuhong/project/react/Sorting_Visualizer/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getBubbleSortAnimation","DEFAUL_LENGTH","LIMIT_LENGTH","RAND_MIN","RAND_MAX","ANIMATE_SPEED","CONFIRM_COLOR","SECONDARY_COLOR","ORIGINAL_COLOR","SortingVisualizer","Component","constructor","props","state","array","length","handleChange","bind","handleSubmit","componentDidMount","resetArray","componentWillUnmount","setState","mergeSort","i","setTimeout","bubbleSort","animations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","oneVal","twoVal","finish","barOneStyle","style","backgroundColor","barTwoStyle","height","quickSort","push","randomNum","resetColor","event","target","value","preventDefault","render","styles","input_style","width","border","fontSize","marginRight","map","idx","min","max","Math","floor","random"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,SAASC,sBAAT,QAAuC,4CAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,aAAa,GAAG,EAAtB;AAEA,MAAMC,YAAY,GAAG,GAArB;AAEA,MAAMC,QAAQ,GAAG,CAAjB;AAEA,MAAMC,QAAQ,GAAG,GAAjB;AAEA,MAAMC,aAAa,GAAG,CAAtB;AAEA,MAAMC,aAAa,GAAG,SAAtB,C,CAEA;;AAEA,MAAMC,eAAe,GAAG,SAAxB;AAEA,MAAMC,cAAc,GAAG,SAAvB;AAGA,eAAe,MAAMC,iBAAN,SAAgCV,KAAK,CAACW,SAAtC,CAAgD;AAC3DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,MAAM,EAAEd;AAFC,KAAb;AAKA,SAAKe,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDE,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB,SAAKC,QAAL,GAAgB,MAAM,KAAtB;AACH;;AAEDC,EAAAA,SAAS,GAAE;AACP,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBC,MAAAA,UAAU,CAAC,MAAI;AAAC,aAAKL,UAAL;AAAkB,OAAxB,EAA0Bf,aAAa,GAAGmB,CAA1C,CAAV,CADyB,CAEzB;AACH;AACJ;;AAEDE,EAAAA,UAAU,GAAE;AACR,UAAMC,UAAU,GAAG3B,sBAAsB,CAAC,KAAKa,KAAL,CAAWC,KAAZ,CAAzC;;AAEA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,UAAU,CAACZ,MAA/B,EAAuCS,CAAC,EAAxC,EAA4C;AACxC,YAAMI,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAM,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,MAAvC,IAAiDR,UAAU,CAACH,CAAD,CAAjE;;AAEA,UAAIW,MAAM,KAAK,CAAf,EAAkB;AACd,cAAMC,WAAW,GAAGR,SAAS,CAACG,SAAD,CAAT,CAAqBM,KAAzC;AACAZ,QAAAA,UAAU,CAAC,MAAM;AACbW,UAAAA,WAAW,CAACE,eAAZ,GAA8BhC,aAA9B;AACH,SAFS,EAEPkB,CAAC,GAAGnB,aAFG,CAAV;AAGH,OALD,MAMK;AACD,cAAM+B,WAAW,GAAGR,SAAS,CAACG,SAAD,CAAT,CAAqBM,KAAzC;AACA,cAAME,WAAW,GAAGX,SAAS,CAACI,SAAD,CAAT,CAAqBK,KAAzC;AAEAZ,QAAAA,UAAU,CAAC,MAAM;AACbW,UAAAA,WAAW,CAACE,eAAZ,GAA8B9B,cAA9B;AACA+B,UAAAA,WAAW,CAACD,eAAZ,GAA8B/B,eAA9B;;AAEA,cAAI0B,MAAM,GAAGC,MAAb,EAAqB;AACjBE,YAAAA,WAAW,CAACI,MAAZ,GAAsB,GAAEN,MAAM,GAAC,EAAG,IAAlC;AACAK,YAAAA,WAAW,CAACC,MAAZ,GAAsB,GAAEP,MAAM,GAAC,EAAG,IAAlC;AACH;AACJ,SARS,EAQPT,CAAC,GAAGnB,aARG,CAAV;AAUH;AACJ;AACJ;;AAEDoC,EAAAA,SAAS,GAAE,CAAE;;AAEbrB,EAAAA,UAAU,GAAG;AACT,UAAMN,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,KAAL,CAAWE,MAA/B,EAAuCS,CAAC,EAAxC,EAA4C;AACxCV,MAAAA,KAAK,CAAC4B,IAAN,CAAWC,SAAS,CAACxC,QAAD,EAAWC,QAAX,CAApB;AACH;;AACD,SAAKkB,QAAL,CAAc;AAACR,MAAAA,KAAK,EAAEA;AAAR,KAAd;AACA,SAAK8B,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAMhB,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,SAAS,CAACb,MAA9B,EAAsCS,CAAC,EAAvC,EAA2C;AACvCI,MAAAA,SAAS,CAACJ,CAAD,CAAT,CAAaa,KAAb,CAAmBC,eAAnB,GAAqC9B,cAArC;AACH;AACJ;;AAEDQ,EAAAA,YAAY,CAAC6B,KAAD,EAAQ;AAChB,QAAI9B,MAAM,GAAG8B,KAAK,CAACC,MAAN,CAAaC,KAA1B;AACAhC,IAAAA,MAAM,GAAGA,MAAM,GAAGb,YAAT,GAAwBA,YAAxB,GAAuCa,MAAhD;AACA,SAAKO,QAAL,CAAc;AAACP,MAAAA,MAAM,EAAEA;AAAT,KAAd;AACH;;AACDG,EAAAA,YAAY,CAAC2B,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAACG,cAAN;AACA,SAAK5B,UAAL;AACH;;AAED6B,EAAAA,MAAM,GAAG;AACL,UAAM;AAACnC,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACA,UAAMqC,MAAM,GAAG;AACXC,MAAAA,WAAW,EAAE;AACTC,QAAAA,KAAK,EAAE,KADE;AAETC,QAAAA,MAAM,EAAE,qBAFC;AAGTC,QAAAA,QAAQ,EAAE,OAHD;AAITd,QAAAA,MAAM,EAAE,OAJC;AAKTe,QAAAA,WAAW,EAAE;AALJ;AADF,KAAf;AAUA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,mBAAf;AAAA,iCACI;AAAM,YAAA,SAAS,EAAC,MAAhB;AAAuB,YAAA,QAAQ,EAAE,KAAKrC,YAAtC;AAAA,oCACI;AAAO,cAAA,KAAK,EAAEgC,MAAM,CAACC,WAArB;AAAkC,cAAA,IAAI,EAAC,MAAvC;AAA8C,cAAA,KAAK,EAAE,KAAKtC,KAAL,CAAWE,MAAhE;AAAwE,cAAA,QAAQ,EAAE,KAAKC;AAAvF;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,SAAS,EAAC,UAAjB;AAA4B,cAAA,IAAI,EAAC,QAAjC;AAA0C,cAAA,KAAK,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAQI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACI;AAAQ,YAAA,SAAS,EAAC,UAAlB;AAA6B,YAAA,OAAO,EAAE,MAAM,KAAKI,UAAL,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,SAAS,EAAC,UAAlB;AAA6B,YAAA,OAAO,EAAE,MAAM,KAAKG,SAAL,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,SAAS,EAAC,UAAlB;AAA6B,YAAA,OAAO,EAAE,MAAM,KAAKG,UAAL,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAQ,YAAA,SAAS,EAAC,UAAlB;AAA6B,YAAA,OAAO,EAAE,MAAM,KAAKe,SAAL,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAgBI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBACK3B,KAAK,CAAC0C,GAAN,CAAU,CAACT,KAAD,EAAQU,GAAR,kBACP;AACI,UAAA,SAAS,EAAC,WADd;AAGI,UAAA,KAAK,EAAE;AACHjB,YAAAA,MAAM,EAAG,GAAEO,KAAK,GAAC,EAAG,IADjB;AAEHT,YAAAA,eAAe,EAAE9B;AAFd;AAHX,WAESiD,GAFT;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAhBJ,eA4BI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAkCH;;AArI0D;;AAyI/D,SAASd,SAAT,CAAmBe,GAAnB,EAAwBC,GAAxB,EAA6B;AACzB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\n\n/* TODO:\n\n1. sorting time\n2. reset to origin array\n3. Change algorithms into drop-down list\n4. create setting drop-down list - set length, set speed.\n5. interrupt - stop, step, continue\n\n*/\n\nconst DEFAUL_LENGTH = 20;\n\nconst LIMIT_LENGTH = 150;\n\nconst RAND_MIN = 5;\n\nconst RAND_MAX = 400;\n\nconst ANIMATE_SPEED = 5;\n\nconst CONFIRM_COLOR = '#27AE60';\n\n// const PRIMARY_COLOR = \"#3537F2\";\n\nconst SECONDARY_COLOR = \"#FFBF00\";\n\nconst ORIGINAL_COLOR = \"#6495ED\";\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            array: [],\n            length: DEFAUL_LENGTH,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    componentWillUnmount() {\n        this.setState = () => false;\n    }\n\n    mergeSort(){\n        for (let i = 0; i < 10; i++) {\n            setTimeout(()=>{this.resetArray()}, ANIMATE_SPEED * i)\n            // console.log(this.state.array)\n        }\n    }\n\n    bubbleSort(){\n        const animations = getBubbleSortAnimation(this.state.array)\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [barOneIdx, barTwoIdx, oneVal, twoVal, finish] = animations[i];\n\n            if (finish === 1) {\n                const barOneStyle = arrayBars[barOneIdx].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = CONFIRM_COLOR;\n                }, i * ANIMATE_SPEED);\n            }\n            else {\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = ORIGINAL_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                    \n                    if (oneVal > twoVal) {\n                        barOneStyle.height = `${twoVal/10}vw`;\n                        barTwoStyle.height = `${oneVal/10}vw`;\n                    }\n                }, i * ANIMATE_SPEED);\n\n            }\n        }\n    }\n\n    quickSort(){}\n\n    resetArray() {\n        const array = []\n        for (let i = 0; i < this.state.length; i++) {\n            array.push(randomNum(RAND_MIN, RAND_MAX));\n        }\n        this.setState({array: array});\n        this.resetColor();\n    }\n\n    resetColor() {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = ORIGINAL_COLOR;\n        }\n    }\n\n    handleChange(event) {\n        let length = event.target.value;\n        length = length > LIMIT_LENGTH ? LIMIT_LENGTH : length;\n        this.setState({length: length});\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        this.resetArray();\n    }\n\n    render() {\n        const {array} = this.state\n        const styles = {\n            input_style: {\n                width: \"20%\",\n                border: \"solid 0.2vw #ffc13b\",\n                fontSize: \"1.3vw\",\n                height: \"1.7vw\",\n                marginRight: \"0.3vw\"\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"nav-bar\">\n                    <div className=\"logo text\">Sorting Visualizer</div>\n                    <div className=\"setting-container\">\n                        <form className=\"form\" onSubmit={this.handleSubmit}>\n                            <input style={styles.input_style} type=\"text\" value={this.state.length} onChange={this.handleChange}/>\n                            <input className=\"btn text\" type=\"submit\" value=\"Set Length\"/>\n                        </form>\n                    </div>\n                    <div className=\"algo-container\">\n                        <button className=\"btn text\" onClick={() => this.resetArray()}>New Array</button>\n                        <button className=\"btn text\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                        <button className=\"btn text\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                        <button className=\"btn text\" onClick={() => this.quickSort()}>Quick Sort</button>\n                    </div>\n                </div>\n                <div className=\"array-container\">\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                                height: `${value/10}vw`,\n                                backgroundColor: ORIGINAL_COLOR,\n                            }}>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"result-container\">\n                    Result Container Placeholder\n                </div>\n            </div>\n        );\n    }\n  \n}\n\nfunction randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}"]},"metadata":{},"sourceType":"module"}