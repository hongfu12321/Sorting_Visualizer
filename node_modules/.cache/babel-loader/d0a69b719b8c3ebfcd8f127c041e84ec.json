{"ast":null,"code":"var _jsxFileName = \"/Users/fuhong/project/react/Sorting_Visualizer/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ARRAYNUM = 10;\nconst RAND_MIN = 5;\nconst RAND_MAX = 200;\nconst ANIMATE_SPEED = 100;\nconst CONFIRM_COLOR = '#27AE60';\nconst PRIMARY_COLOR = \"#3537F2\";\nconst SECONDARY_COLOR = \"#FFBF00\";\nconst ORIGINAL_COLOR = \"#6495ED\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  componentWillUnmount() {\n    this.setState = () => false;\n  }\n\n  mergeSort() {\n    for (let i = 0; i < 10; i++) {\n      setTimeout(() => {\n        this.resetArray();\n      }, ANIMATE_SPEED * i); // console.log(this.state.array)\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimation(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, oneVal, twoVal, finish] = animations[i];\n      let preStyle = arrayBars[0].style;\n\n      if (finish === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = CONFIRM_COLOR;\n        }, i * ANIMATE_SPEED);\n      } else {\n        console.log(barOneIdx, barTwoIdx);\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          preStyle.color = ORIGINAL_COLOR;\n          barOneStyle.color = PRIMARY_COLOR;\n          barTwoStyle.color = SECONDARY_COLOR;\n\n          if (oneVal > twoVal) {\n            barOneStyle.height = `${twoVal}px`;\n            barTwoStyle.height = `${oneVal}px`;\n          }\n\n          preStyle = barOneStyle;\n        }, i * ANIMATE_SPEED);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < ARRAYNUM; i++) {\n      array.push(randomNum(RAND_MIN, RAND_MAX));\n    }\n\n    this.setState({\n      array: array\n    });\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${value}px`,\n            backgroundColor: ORIGINAL_COLOR\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.resetArray(),\n          children: \"New Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Array Length\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.mergeSort(),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.bubbleSort(),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.quickSort(),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/Users/fuhong/project/react/Sorting_Visualizer/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getBubbleSortAnimation","ARRAYNUM","RAND_MIN","RAND_MAX","ANIMATE_SPEED","CONFIRM_COLOR","PRIMARY_COLOR","SECONDARY_COLOR","ORIGINAL_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","componentWillUnmount","setState","mergeSort","i","setTimeout","bubbleSort","animations","length","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","oneVal","twoVal","finish","preStyle","style","barOneStyle","backgroundColor","console","log","barTwoStyle","color","height","quickSort","push","randomNum","render","map","value","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\n\n\nconst ARRAYNUM = 10;\n\nconst RAND_MIN = 5;\n\nconst RAND_MAX = 200;\n\nconst ANIMATE_SPEED = 100;\n\nconst CONFIRM_COLOR = '#27AE60';\n\nconst PRIMARY_COLOR = \"#3537F2\";\n\nconst SECONDARY_COLOR = \"#FFBF00\";\n\nconst ORIGINAL_COLOR = \"#6495ED\";\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            array: []\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    componentWillUnmount() {\n        this.setState = () => false;\n    }\n\n    mergeSort(){\n        for (let i = 0; i < 10; i++) {\n            setTimeout(()=>{this.resetArray()}, ANIMATE_SPEED * i)\n            // console.log(this.state.array)\n        }\n    }\n\n    bubbleSort(){\n        const animations = getBubbleSortAnimation(this.state.array)\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [barOneIdx, barTwoIdx, oneVal, twoVal, finish] = animations[i];\n            let preStyle = arrayBars[0].style;\n\n            if (finish === 1) {\n                const barOneStyle = arrayBars[barOneIdx].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = CONFIRM_COLOR;\n                }, i * ANIMATE_SPEED);\n            }\n            else {\n                console.log(barOneIdx, barTwoIdx);\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n\n                setTimeout(() => {\n                    preStyle.color = ORIGINAL_COLOR;\n                    barOneStyle.color = PRIMARY_COLOR;\n                    barTwoStyle.color = SECONDARY_COLOR;\n                    \n                    if (oneVal > twoVal) {\n                        barOneStyle.height = `${twoVal}px`;\n                        barTwoStyle.height = `${oneVal}px`;\n                    }\n                    preStyle = barOneStyle;\n                }, i * ANIMATE_SPEED);\n\n            }\n        }\n    }\n\n    quickSort(){}\n\n    resetArray() {\n        const array = []\n        for (let i = 0; i < ARRAYNUM; i++) {\n            array.push(randomNum(RAND_MIN, RAND_MAX));\n        }\n        this.setState({array: array})\n    }\n\n    render() {\n        const {array} = this.state\n\n        return (\n            <div className=\"container\">\n                <div className=\"array-container\">\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                                height: `${value}px`,\n                                backgroundColor: ORIGINAL_COLOR,\n                            }}>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"nav-bar\">\n                    <button onClick={() => this.resetArray()}>New Array</button>\n                    <button >Array Length</button>\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                    <button onClick={() => this.quickSort()}>Quick Sort</button>\n                </div>\n            </div>\n        );\n    }\n  \n}\n\nfunction randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}"]},"metadata":{},"sourceType":"module"}