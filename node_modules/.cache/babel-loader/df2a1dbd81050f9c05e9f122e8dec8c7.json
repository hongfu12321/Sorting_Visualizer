{"ast":null,"code":"export function getBubbleSortAnimation(array) {\n  console.log('Start Bubble Sort!');\n  let animations = [];\n  let arr_len = array.length;\n\n  for (let i = 0; i < arr_len; i++) {\n    for (let j = 0; j < arr_len - i - 1; j++) {\n      animations.push([j, j + 1, array[j], array[j + 1], 0]);\n\n      if (array[j] > array[j + 1]) {\n        let tmp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = tmp;\n      }\n    } // Index of the confirm sorted element.\n\n\n    animations.push([arr_len - i - 1, 0, 0, 0, 1]);\n  }\n\n  console.log(arraySorted(array));\n  return animations;\n}\nexport function getMergeSortAnimation(array) {\n  console.log('Start Merge Sort!');\n  let animations = []; // const arr = mergeSort(array)\n\n  mergeSort(array, 0, array.length, animations);\n  console.log(array);\n  console.log(arraySorted(array));\n  return animations;\n}\n\nfunction mergeSort(array, startIdx, endIdx, animations) {\n  if (startIdx >= endIdx) return array;\n  const midIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSort(array, startIdx, midIdx, animations);\n  mergeSort(array, midIdx + 1, endIdx, animations);\n  merge(array, startIdx, midIdx, endIdx, animations);\n  console.log(`Array sorted: ${arraySorted(array)}`);\n} // Animation show boundary\n\n\nconst SHOW_BOUNDARY = 0; // Animation show merging process \n\nconst MERGING = 1;\n\nfunction merge(array, startIdx, midIdx, endIdx, animations) {\n  let i = startIdx;\n  let j = midIdx + 1;\n  let k = 0;\n  let helper = array.slice(i, j);\n  animations.push([0, 0, startIdx, midIdx, endIdx - 1, SHOW_BOUNDARY]);\n\n  while (j <= endIdx && k < helper.length) {\n    if (helper[k] > array[j]) {\n      array[i] = array[j];\n      j++;\n    } else {\n      array[i] = helper[k];\n      k++;\n    }\n\n    animations.push([i, array[i], 0, 0, 0, MERGING]);\n    i++;\n  }\n\n  while (j <= endIdx) {\n    array[i] = array[j];\n    animations.push([i, array[i], 0, 0, 0, MERGING]);\n    i++;\n    j++;\n  }\n\n  while (k < helper.length) {\n    array[i] = helper[k];\n    animations.push([i, array[i], 0, 0, 0, MERGING]);\n    i++;\n    k++;\n  }\n}\n\nfunction arraySorted(array) {\n  if (array.length <= 1) {\n    return true;\n  }\n\n  let pre = array[0];\n\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < pre) {\n      return false;\n    }\n\n    pre = array[i];\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/fuhong/project/react/Sorting_Visualizer/sorting_visualizer/src/SortingAlgorithms/SortingAlgorithms.jsx"],"names":["getBubbleSortAnimation","array","console","log","animations","arr_len","length","i","j","push","tmp","arraySorted","getMergeSortAnimation","mergeSort","startIdx","endIdx","midIdx","Math","floor","merge","SHOW_BOUNDARY","MERGING","k","helper","slice","pre"],"mappings":"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","sourcesContent":["export function getBubbleSortAnimation(array) {\n    console.log('Start Bubble Sort!');\n    \n    let animations = [];\n    let arr_len = array.length;\n\n    for (let i = 0; i < arr_len; i++) {\n        for (let j = 0; j < arr_len - i - 1; j++) {\n            animations.push([j, j + 1, array[j], array[j + 1], 0]);\n\n            if (array[j] > array[j + 1]) {\n                let tmp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = tmp;\n            }\n        }\n        // Index of the confirm sorted element.\n        animations.push([arr_len - i - 1, 0, 0, 0, 1]);\n    }\n    console.log(arraySorted(array));\n    return animations;\n}\n\nexport function getMergeSortAnimation(array) {\n    console.log('Start Merge Sort!');\n    let animations = []\n\n    // const arr = mergeSort(array)\n    mergeSort(array, 0, array.length, animations)\n    console.log(array)\n    console.log(arraySorted(array))\n\n    return animations\n}\n\nfunction mergeSort(array, startIdx, endIdx, animations) {\n    if (startIdx >= endIdx) return array;\n\n    const midIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSort(array, startIdx, midIdx, animations);\n    mergeSort(array, midIdx + 1, endIdx, animations);\n    merge(array, startIdx, midIdx, endIdx, animations);\n\n    console.log(`Array sorted: ${arraySorted(array)}`);\n}\n\n// Animation show boundary\nconst SHOW_BOUNDARY = 0;\n// Animation show merging process \nconst MERGING = 1;\n\nfunction merge(array, startIdx, midIdx, endIdx, animations) {\n    let i = startIdx;\n    let j = midIdx + 1;\n    let k = 0;\n    let helper = array.slice(i, j);\n\n    animations.push([0, 0, startIdx, midIdx, endIdx - 1, SHOW_BOUNDARY])\n    while (j <= endIdx && k < helper.length) {\n        if (helper[k] > array[j]) {\n            array[i] = array[j];\n            j++;\n        }\n        else {\n            array[i] = helper[k];\n            k++;\n        }\n        animations.push([i, array[i], 0, 0, 0, MERGING])\n        i++;\n    }\n    while (j <= endIdx) {\n        array[i] = array[j];\n        animations.push([i, array[i], 0, 0, 0, MERGING])\n        i++;\n        j++;\n    }\n    while (k < helper.length) {\n        array[i] = helper[k];\n        animations.push([i, array[i], 0, 0, 0, MERGING]);\n        i++;\n        k++;\n    }\n}\n\nfunction arraySorted(array) {\n    if (array.length <= 1) { return true; }\n    \n    let pre = array[0];\n\n    for (let i = 1; i < array.length; i++){\n        if (array[i] < pre) {return false;}\n        pre = array[i];\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}