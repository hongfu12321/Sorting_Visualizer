{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.jsx","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimation","array","animations","mergeSort","length","startIdx","endIdx","midIdx","Math","floor","i","j","k","helper","slice","push","merge","getQuickSortAnimation","quickSort","arr","start","end","middle","pivotValue","pivotIdx","partition","ARRAY_SCALE","CONFIRM_COLOR","SECONDARY_COLOR","ORIGINAL_COLOR","SortingVisualizer","props","state","copy_array","speed","time_complexity","timeoutId","handleLength","bind","handleSpeed","handleSubmit","this","generateNewArray","setState","timestamp","Date","now","arrayBars","document","getElementsByClassName","idx","val","status","setTimeout","style","map","backgroundColor","idx_style","height","arr_len","tmp","getBubbleSortAnimation","barOneIdx","barTwoIdx","oneVal","twoVal","finish","barOneStyle","barTwoStyle","srcIdx","srcVal","desIdx","desVal","resetStatus","min","max","random","clearTimeout","event","target","value","preventDefault","styles","input_style","width","border","fontSize","marginRight","marginLeft","className","onClick","resetArray","bubbleSort","onSubmit","type","onChange","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qSAmCO,SAASA,EAAsBC,GAElC,IAAIC,EAAa,GAKjB,OAHAC,EAAUF,EAAO,EAAGA,EAAMG,OAAQF,GAG3BA,EAGX,SAASC,EAAUF,EAAOI,EAAUC,EAAQJ,GACxC,GAAIG,GAAYC,EAAQ,OAAOL,EAE/B,IAAMM,EAASC,KAAKC,OAAOJ,EAAWC,GAAU,GAChDH,EAAUF,EAAOI,EAAUE,EAAQL,GACnCC,EAAUF,EAAOM,EAAS,EAAGD,EAAQJ,GAIzC,SAAeD,EAAOI,EAAUE,EAAQD,EAAQJ,GAC5C,IAAIQ,EAAIL,EACJM,EAAIJ,EAAS,EACbK,EAAI,EACJC,EAASZ,EAAMa,MAAMJ,EAAGC,GAE5BT,EAAWa,KAAK,CAAC,EAAG,EAAGV,EAAUC,EAAS,EA7BxB,IA8BlB,KAAOK,GAAKL,GAAUM,EAAIC,EAAOT,QACzBS,EAAOD,GAAKX,EAAMU,IAClBV,EAAMS,GAAKT,EAAMU,GACjBA,MAGAV,EAAMS,GAAKG,EAAOD,GAClBA,KAEJV,EAAWa,KAAK,CAACL,EAAGT,EAAMS,GAAI,EAAG,EArCzB,IAsCRA,IAEJ,KAAOC,EAAIL,GACPJ,EAAWa,KAAK,CAACL,EAAGT,EAAMU,GAAI,EAAG,EAzCzB,IA0CRV,EAAMS,KAAOT,EAAMU,KAEvB,KAAOC,EAAIC,EAAOT,QACdF,EAAWa,KAAK,CAACL,EAAGG,EAAOD,GAAI,EAAG,EA7C1B,IA8CRX,EAAMS,KAAOG,EAAOD,KA5BxBI,CAAMf,EAAOI,EAAUE,EAAQD,EAAQJ,GA2CpC,SAASe,EAAsBhB,GAElC,IAAIC,EAAa,GAKjB,OAHAgB,EAAUjB,EAAO,EAAGA,EAAMG,OAAS,EAAGF,GAG/BA,EAwBX,SAASgB,EAAUC,EAAKC,EAAOC,EAAKnB,GAEhC,KAAIkB,EAAQC,GAAZ,CAKA,IAAIC,EA5BR,SAAmBH,EAAKC,EAAOC,EAAKnB,GAEhC,IAAMqB,EAAaJ,EAAIE,GACnBG,EAAWJ,EAEflB,EAAWa,KAAK,CAACM,EAAKE,EAAY,EAAG,EArB3B,IAsBV,IAAK,IAAIb,EAAIU,EAAOV,EAAIW,EAAKX,IAEzB,GAAIS,EAAIT,GAAKa,EAAY,CACrBrB,EAAWa,KAAK,CAACL,EAAGS,EAAIT,GAAIc,EAAUL,EAAIK,GAvBpC,IAsBe,MAEK,CAACL,EAAIK,GAAWL,EAAIT,IAA7CS,EAAIT,GAFgB,KAEZS,EAAIK,GAFQ,KAGrBA,IAKRtB,EAAWa,KAAK,CAACM,EAAKF,EAAIE,GAAMG,EAAUL,EAAIK,GA5BnC,IAYgC,MAiBf,CAACL,EAAIE,GAAMF,EAAIK,IAC3C,OADCL,EAAIK,GAjBsC,KAiB3BL,EAAIE,GAjBuB,KAkBpCG,EAUMC,CAAUN,EAAKC,EAAOC,EAAKnB,GAGxCgB,EAAUC,EAAKC,EAAOE,EAAS,EAAGpB,GAClCgB,EAAUC,EAAKG,EAAS,EAAGD,EAAKnB,I,WCzH9BwB,EAAc,GASdC,EAAgB,UAChBC,EAAkB,UAClBC,EAAiB,UAgBFC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACT/B,MAAO,GACPgC,WAAY,GACZ7B,OApCW,GAqCX8B,MAhCU,GAiCVC,gBAAiB,EACjBC,WAAY,GAGhB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAdL,E,qDAiBnB,WACIG,KAAKC,qB,kCAGT,WACID,KAAKE,SAAW,kBAAM,K,uBAG1B,WAKI,IALQ,IAGJP,EAHG,OACDQ,EAAYC,KAAKC,MACjB5C,EAAaF,EAAsByC,KAAKT,MAAM/B,MAAMa,MAAM,IAFzD,WAKEJ,GACL,IAAMqC,EAAYC,SAASC,uBAAuB,aAN/C,cAO0C/C,EAAWQ,GAPrD,GAOIwC,EAPJ,KAOSC,EAPT,KAOc9C,EAPd,KAOwBC,EAPxB,KAOgC8C,EAPhC,KASHhB,EAAYiB,YAAW,WACnB,GA/CM,IA+CFD,EAIA,CAHoBL,EAAU1C,GAAUiD,MACtBP,EAAUzC,GAAQgD,OAEXC,KAAI,SAACD,GAC1B,OAAOA,EAAME,gBAAkB5B,UAIlC,GAvDL,IAuDSwB,EAAoB,CACzB,IAAMK,EAAYV,EAAUG,GAAKI,MAEjCG,EAAUD,gBAAkB7B,EAC5B8B,EAAUC,OAAV,UAAsBP,EAAIzB,EAA1B,SAELhB,EAAI,EAAKsB,MAAME,QApBbxB,EAAI,EAAGA,EAAIR,EAAWE,OAAQM,IAAM,EAApCA,GAsBT+B,KAAKE,SAAS,CAACP,UAAWA,IAE1BiB,YAAW,WACP,EAAKV,SAAS,CAACR,iBAAkBU,KAAKC,MAAQF,GAAa,QAC5D1C,EAAWE,OAASqC,KAAKT,MAAME,S,wBAGtC,WAKI,IALS,IAGLE,EAHI,OACFlC,EDpGP,SAAgCD,GAKnC,IAHA,IAAIC,EAAa,GACbyD,EAAU1D,EAAMG,OAEXM,EAAI,EAAGA,EAAIiD,EAASjD,IAAK,CAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIgD,EAAUjD,EAAI,EAAGC,IAGjC,GAFAT,EAAWa,KAAK,CAACJ,EAAGA,EAAI,EAAGV,EAAMU,GAAIV,EAAMU,EAAI,GAAI,IAE/CV,EAAMU,GAAKV,EAAMU,EAAI,GAAI,CACzB,IAAIiD,EAAM3D,EAAMU,GAChBV,EAAMU,GAAKV,EAAMU,EAAI,GACrBV,EAAMU,EAAI,GAAKiD,EAIvB1D,EAAWa,KAAK,CAAC4C,EAAUjD,EAAI,EAAG,EAAG,EAAG,EAAG,IAI/C,OAAOR,ECgFgB2D,CAAuBpB,KAAKT,MAAM/B,MAAMa,MAAM,IAC3D8B,EAAYC,KAAKC,MAFf,WAKCpC,GACL,IAAMqC,EAAYC,SAASC,uBAAuB,aAN9C,cAOmD/C,EAAWQ,GAP9D,GAOGoD,EAPH,KAOcC,EAPd,KAOyBC,EAPzB,KAOiCC,EAPjC,KAOyCC,EAPzC,KASJ9B,EAAYiB,YAAW,WACnB,GAAe,IAAXa,EAAc,CACMnB,EAAUe,GAAWR,MAC7BE,gBAAkB7B,MAE7B,CACD,IAAMwC,EAAcpB,EAAUe,GAAWR,MACnCc,EAAcrB,EAAUgB,GAAWT,MAEzCa,EAAYX,gBAAkB3B,EAC9BuC,EAAYZ,gBAAkB5B,EAE1BoC,EAASC,IACTE,EAAYT,OAAZ,UAAwBO,EAAOvC,EAA/B,MACA0C,EAAYV,OAAZ,UAAwBM,EAAOtC,EAA/B,UAGThB,EAAI,EAAKsB,MAAME,QArBbxB,EAAI,EAAGA,EAAIR,EAAWE,OAAQM,IAAM,EAApCA,GAuBT+B,KAAKE,SAAS,CAACP,UAAWA,IAC1BiB,YAAW,WACP,EAAKV,SAAS,CAACR,iBAAkBU,KAAKC,MAAQF,GAAa,QAC5D1C,EAAWE,OAASqC,KAAKT,MAAME,S,uBAGtC,WAKI,IALQ,IAGJE,EAHG,OACDlC,EAAae,EAAsBwB,KAAKT,MAAM/B,MAAMa,MAAM,IAC1D8B,EAAYC,KAAKC,MAFhB,WAKEpC,GACL,IAAMqC,EAAYC,SAASC,uBAAuB,aAN/C,cAO8C/C,EAAWQ,GAPzD,GAOI2D,EAPJ,KAOYC,EAPZ,KAOoBC,EAPpB,KAO4BC,EAP5B,KAOoCpB,EAPpC,KASHhB,EAAYiB,YAAW,WA5GrB,IA6GMD,EACAL,EAAUsB,GAAQf,MAAME,gBAAkB5B,EA7G5C,IA+GOwB,GAELL,EAAUsB,GAAQf,MAAMI,OAAxB,UAAoCc,EAAO9C,EAA3C,MACAqB,EAAUwB,GAAQjB,MAAMI,OAAxB,UAAoCY,EAAO5C,EAA3C,OAjHL,IAmHU0B,IACLL,EAAUsB,GAAQf,MAAME,gBAAkB3B,EAC1CkB,EAAUsB,GAAQf,MAAMI,OAAxB,UAAoCc,EAAO9C,EAA3C,MACAqB,EAAUwB,GAAQjB,MAAME,gBAAkB7B,EAC1CoB,EAAUwB,GAAQjB,MAAMI,OAAxB,UAAoCY,EAAO5C,EAA3C,SAELhB,EAAI,EAAKsB,MAAME,QAnBbxB,EAAI,EAAGA,EAAIR,EAAWE,OAAQM,IAAM,EAApCA,GAqBT+B,KAAKE,SAAS,CAACP,UAAWA,IAC1BiB,YAAW,WACP,EAAKV,SAAS,CAACR,iBAAkBU,KAAKC,MAAQF,GAAa,QAC5D1C,EAAWE,OAASqC,KAAKT,MAAME,S,8BAGtC,WACIO,KAAKgC,cAGL,IAFA,IAsHWC,EAAKC,EAtHV1E,EAAQ,GAELS,EAAI,EAAGA,EAAI+B,KAAKT,MAAM5B,OAAQM,IACnCT,EAAMc,MAmHC2D,EAhRF,EAgROC,EA/QP,IAgRNnE,KAAKC,MAAMD,KAAKoE,UAAYD,EAAMD,EAAM,GAAKA,KAlHhDjC,KAAKE,SAAS,CAAC1C,MAAOA,EAAOgC,WAAW,GAAD,OAAMhC,GAAQkC,gBAAiB,M,wBAG1E,WACIM,KAAKgC,cAGL,IAFA,IAAM1B,EAAYC,SAASC,uBAAuB,aAEzCvC,EAAI,EAAGA,EAAIqC,EAAU3C,OAAQM,IAClCqC,EAAUrC,GAAG4C,MAAMI,OAAnB,UAA+BjB,KAAKT,MAAMC,WAAWvB,GAAGgB,EAAxD,MAEJe,KAAKE,SAAS,CAAC1C,MAAM,YAAKwC,KAAKT,MAAMC,YAAaE,gBAAiB,M,yBAGvE,WAEI,IAA8B,IAA1BM,KAAKT,MAAMI,UAEX,IADA,IAAMA,EAAYK,KAAKT,MAAMI,UACpB1B,EAAI0B,EAAW1B,GAAK,EAAGA,IAC5BmE,aAAazC,EAAY1B,GAMjC,IADA,IAAMqC,EAAYC,SAASC,uBAAuB,aACzCvC,EAAI,EAAGA,EAAIqC,EAAU3C,OAAQM,IAClCqC,EAAUrC,GAAG4C,MAAME,gBAAkB3B,I,0BAI7C,SAAaiD,GACT,IAAI1E,EAAS0E,EAAMC,OAAOC,MAC1B5E,EAASA,EAhMI,QAgMmCA,EAChDqC,KAAKE,SAAS,CAACvC,OAAQA,M,yBAG3B,SAAY0E,GACR,IAAI5C,EAAQ4C,EAAMC,OAAOC,MACzBvC,KAAKE,SAAS,CAACT,MAAOA,M,0BAG1B,SAAa4C,GACTA,EAAMG,iBACNxC,KAAKC,qB,oBAGT,WAAU,IAAD,OACEzC,EAASwC,KAAKT,MAAd/B,MACDiF,EAAS,CACXC,YAAa,CACTC,MAAO,MACPC,OAAQ,sBACRC,SAAU,QACV5B,OAAQ,QACR6B,YAAa,QACbC,WAAY,QAIpB,OACI,sBAAKC,UAAU,YAAf,UACI,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,YAAf,gCACA,sBAAKA,UAAU,2BAAf,UACI,wBAAQA,UAAU,qBAAqBC,QAAS,kBAAM,EAAKhD,oBAA3D,uBACA,wBAAQ+C,UAAU,qBAAqBC,QAAS,kBAAM,EAAKC,cAA3D,4BAEJ,qBAAKF,UAAU,gBAAf,SACI,sBAAKA,UAAU,WAAf,UACI,wBAAQA,UAAU,WAAlB,+BACA,sBAAKA,UAAU,mBAAf,UACI,wBAAQA,UAAU,6BAA6BC,QAAS,kBAAM,EAAKE,cAAnE,yBACA,wBAAQH,UAAU,6BAA6BC,QAAS,kBAAM,EAAKvF,aAAnE,wBACA,wBAAQsF,UAAU,6BAA6BC,QAAS,kBAAM,EAAKxE,aAAnE,gCAIZ,qBAAKuE,UAAU,gBAAf,SACI,sBAAKA,UAAU,WAAf,UACI,wBAAQA,UAAU,WAAlB,4BACA,sBAAKA,UAAU,mBAAf,UACI,uBAAMA,UAAU,eAAeI,SAAUpD,KAAKD,aAA9C,UACI,uBAAOc,MAAO4B,EAAOC,YAAaW,KAAK,OAAOd,MAAOvC,KAAKT,MAAM5B,OAAQ2F,SAAUtD,KAAKJ,eACvF,uBAAOoD,UAAU,6BAA6BK,KAAK,SAASd,MAAM,kBAEtE,uBAAMS,UAAU,eAAeI,SAAUpD,KAAKD,aAA9C,UACI,uBAAOc,MAAO4B,EAAOC,YAAaW,KAAK,OAAOd,MAAOvC,KAAKT,MAAME,MAAO6D,SAAUtD,KAAKF,cACtF,uBAAOkD,UAAU,6BAA6BK,KAAK,SAASd,MAAM,4BAMtF,qBAAKS,UAAU,kBAAf,SACKxF,EAAMsD,KAAI,SAACyB,EAAO9B,GAAR,OACP,qBACIuC,UAAU,YAEVnC,MAAO,CACHI,OAAO,GAAD,OAAKsB,EAAMtD,EAAX,MACN8B,gBAAiB3B,IAHhBqB,QAQjB,qBAAKuC,UAAU,wBAAf,SACI,wCAAWhD,KAAKT,MAAMG,gBAAtB,gB,GA9O2B6D,IAAMC,W,MC/BtCC,MARf,WACI,OACI,qBAAKT,UAAU,MAAf,SACI,cAAC,EAAD,OCMGU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9D,SAAS+D,eAAe,SAM1BZ,M","file":"static/js/main.e8b44ffe.chunk.js","sourcesContent":["/*\n** Bubble sort\n*/\nexport function getBubbleSortAnimation(array) {\n    // console.log('Start Bubble Sort!');\n    let animations = [];\n    let arr_len = array.length;\n\n    for (let i = 0; i < arr_len; i++) {\n        for (let j = 0; j < arr_len - i - 1; j++) {\n            animations.push([j, j + 1, array[j], array[j + 1], 0]);\n\n            if (array[j] > array[j + 1]) {\n                let tmp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = tmp;\n            }\n        }\n        // Index of the confirm sorted element.\n        animations.push([arr_len - i - 1, 0, 0, 0, 1]);\n    }\n    // const response = arraySorted(array) ? `Bubble Sort Succeed!` : `Bubble Sort Failed...`;\n    // console.log(response)\n    return animations;\n}\n\n\n/*\n** Merge sort\n*/\n// Animation show boundary\nconst SHOW_BOUNDARY = 0;\n// Animation show merging process \nconst MERGING = 1;\n\nexport function getMergeSortAnimation(array) {\n    // console.log('Start Merge Sort!');\n    let animations = []\n    \n    mergeSort(array, 0, array.length, animations)\n    // const response = arraySorted(array) ? `Merge Sort Succeed!` : `Merge Sort Failed...`;\n    // console.log(response)\n    return animations\n}\n\nfunction mergeSort(array, startIdx, endIdx, animations) {\n    if (startIdx >= endIdx) return array;\n\n    const midIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSort(array, startIdx, midIdx, animations);\n    mergeSort(array, midIdx + 1, endIdx, animations);\n    merge(array, startIdx, midIdx, endIdx, animations);\n}\n\nfunction merge(array, startIdx, midIdx, endIdx, animations) {\n    let i = startIdx;\n    let j = midIdx + 1;\n    let k = 0;\n    let helper = array.slice(i, j);\n\n    animations.push([0, 0, startIdx, endIdx - 1, SHOW_BOUNDARY])\n    while (j <= endIdx && k < helper.length) {\n        if (helper[k] > array[j]) {\n            array[i] = array[j];\n            j++;\n        }\n        else {\n            array[i] = helper[k];\n            k++;\n        }\n        animations.push([i, array[i], 0, 0, MERGING])\n        i++;\n    }\n    while (j < endIdx) {\n        animations.push([i, array[j], 0, 0, MERGING])\n        array[i++] = array[j++];\n    }\n    while (k < helper.length) {\n        animations.push([i, helper[k], 0, 0, MERGING]);\n        array[i++] = helper[k++];\n    }\n}\n\n\n/*\n** Quick sort\n*/\n// Animation show pivot\nconst PIVOT = 0;\n// Animation show partition\nconst PARTITION = 1;\n// Animation to put pivot in the middle\nconst MIDDLE = 2\n\nexport function getQuickSortAnimation(array) {\n    // console.log('Start Quick Sort!');\n    let animations = []\n    \n    quickSort(array, 0, array.length - 1, animations);\n    // const response = arraySorted(array) ? `Quick Sort Succeed!` : `Quick Sort Failed...`;\n    // console.log(response)\n    return animations\n}\n\nfunction partition(arr, start, end, animations){\n    // Taking the last element as the pivot\n    const pivotValue = arr[end];\n    let pivotIdx = start; \n\n    animations.push([end, pivotValue, 0, 0, PIVOT]);\n    for (let i = start; i < end; i++) {\n        // if arr[i] < pivot, move to the front.\n        if (arr[i] < pivotValue) {\n            animations.push([i, arr[i], pivotIdx, arr[pivotIdx], PARTITION]);\n            [arr[i], arr[pivotIdx]] = [arr[pivotIdx], arr[i]];\n            pivotIdx++;\n        }\n    }\n    \n    // Putting the pivot value in the middle\n    animations.push([end, arr[end], pivotIdx, arr[pivotIdx], MIDDLE]);\n    [arr[pivotIdx], arr[end]] = [arr[end], arr[pivotIdx]]\n    return pivotIdx;\n};\n\nfunction quickSort(arr, start, end, animations) {\n    // Base case or terminating case\n    if (start > end) {\n        return;\n    }\n    \n    // Returns pivotIndex\n    let middle = partition(arr, start, end, animations);\n    \n    // Recursively apply the same logic to the left and right subarrays\n    quickSort(arr, start, middle - 1, animations);\n    quickSort(arr, middle + 1, end, animations);\n}\n\n\n/*\n** Utility\n*/\n// function arraySorted(array) {\n//     if (array.length <= 1) { return true; }\n    \n//     let pre = array[0];\n\n//     for (let i = 1; i < array.length; i++){\n//         if (array[i] < pre) {return false;}\n//         pre = array[i];\n//     }\n//     return true;\n// }","import React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\nimport { getMergeSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\nimport { getQuickSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\n\n/* TODO:\n* interrupt - stop, step, continue\n*/\n\n/*\n** Array Setting\n*/\nconst DEFAULT_LENGTH = 30;\nconst LIMIT_LENGTH = 150;\nconst ARRAY_SCALE = 12;\nconst RAND_MIN = 5;\nconst RAND_MAX = 400;\nconst DEFAULT_SPEED = 15;\n\n/*\n** Collor Setting\n*/\n// const PRIMARY_COLOR = \"#3537F2\";\nconst CONFIRM_COLOR = '#27AE60';\nconst SECONDARY_COLOR = \"#FFBF00\";\nconst ORIGINAL_COLOR = \"#6495ED\";\n\n/*\n** Merge Sort Parameter\n*/\nconst SHOW_BOUNDARY = 0;\nconst MERGING = 1;\n\n/* \n** Quick Sort Parameter\n*/\nconst PIVOT = 0;\nconst PARTITION = 1;\nconst MIDDLE = 2\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            array: [],\n            copy_array: [],\n            length: DEFAULT_LENGTH,\n            speed: DEFAULT_SPEED,\n            time_complexity: 0,\n            timeoutId: -1,\n        };\n        \n        this.handleLength = this.handleLength.bind(this);\n        this.handleSpeed = this.handleSpeed.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.generateNewArray();\n    }\n\n    componentWillUnmount() {\n        this.setState = () => false;\n    }\n\n    mergeSort(){\n        const timestamp = Date.now();\n        const animations = getMergeSortAnimation(this.state.array.slice(0));\n        let timeoutId;\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [idx, val, startIdx, endIdx, status] = animations[i];\n\n            timeoutId = setTimeout(() => {\n                if (status === SHOW_BOUNDARY) {\n                    const start_style = arrayBars[startIdx].style;\n                    const end_style = arrayBars[endIdx].style;\n\n                    [start_style, end_style].map((style) => {\n                        return style.backgroundColor = SECONDARY_COLOR;\n                    })\n                    \n                }\n                else if (status === MERGING) {\n                    const idx_style = arrayBars[idx].style;\n\n                    idx_style.backgroundColor = CONFIRM_COLOR;\n                    idx_style.height = `${val/ARRAY_SCALE}vw`;\n                }\n            }, i * this.state.speed);\n        }\n        this.setState({timeoutId: timeoutId});\n        \n        setTimeout(() => {\n            this.setState({time_complexity: (Date.now() - timestamp) / 1000})\n        }, animations.length * this.state.speed);\n    }\n\n    bubbleSort(){\n        const animations = getBubbleSortAnimation(this.state.array.slice(0));\n        const timestamp = Date.now();\n        let timeoutId;\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [barOneIdx, barTwoIdx, oneVal, twoVal, finish] = animations[i];\n\n            timeoutId = setTimeout(() => {\n                if (finish === 1) {\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.backgroundColor = CONFIRM_COLOR;\n                }\n                else {\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    \n                    barOneStyle.backgroundColor = ORIGINAL_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                    \n                    if (oneVal > twoVal) {\n                        barOneStyle.height = `${twoVal/ARRAY_SCALE}vw`;\n                        barTwoStyle.height = `${oneVal/ARRAY_SCALE}vw`;\n                    }\n                }\n            }, i * this.state.speed);\n        }\n        this.setState({timeoutId: timeoutId});\n        setTimeout(() => {\n            this.setState({time_complexity: (Date.now() - timestamp) / 1000})\n        }, animations.length * this.state.speed);\n    }\n\n    quickSort(){\n        const animations = getQuickSortAnimation(this.state.array.slice(0));\n        const timestamp = Date.now();\n        let timeoutId;\n        \n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [srcIdx, srcVal, desIdx, desVal, status] = animations[i];\n\n            timeoutId = setTimeout(() => {\n                if (status === PIVOT) {\n                    arrayBars[srcIdx].style.backgroundColor = SECONDARY_COLOR;\n                }\n                else if (status === PARTITION) {\n                    // Elements swap when doing partition.\n                    arrayBars[srcIdx].style.height = `${desVal/ARRAY_SCALE}vw`;\n                    arrayBars[desIdx].style.height = `${srcVal/ARRAY_SCALE}vw`;\n                }\n                else if (status === MIDDLE) {\n                    arrayBars[srcIdx].style.backgroundColor = ORIGINAL_COLOR;\n                    arrayBars[srcIdx].style.height = `${desVal/ARRAY_SCALE}vw`;\n                    arrayBars[desIdx].style.backgroundColor = CONFIRM_COLOR;\n                    arrayBars[desIdx].style.height = `${srcVal/ARRAY_SCALE}vw`;\n                }\n            }, i * this.state.speed);\n        }\n        this.setState({timeoutId: timeoutId});\n        setTimeout(() => {\n            this.setState({time_complexity: (Date.now() - timestamp) / 1000})\n        }, animations.length * this.state.speed);\n    }\n\n    generateNewArray() {\n        this.resetStatus();\n        const array = []\n\n        for (let i = 0; i < this.state.length; i++) {\n            array.push(randomNum(RAND_MIN, RAND_MAX));\n        }\n        this.setState({array: array, copy_array: [...array], time_complexity: 0,});\n    }\n\n    resetArray() {\n        this.resetStatus();\n        const arrayBars = document.getElementsByClassName('array-bar');\n        \n        for (let i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.height = `${this.state.copy_array[i]/ARRAY_SCALE}vw`;\n        }\n        this.setState({array: [...this.state.copy_array], time_complexity: 0,})\n    }\n\n    resetStatus() {\n        // Clear running animations\n        if (this.state.timeoutId !== -1) {\n            const timeoutId = this.state.timeoutId;\n            for (let i = timeoutId; i >= 0; i--) {\n                clearTimeout(timeoutId - i);\n            }\n        }\n\n        // reset color\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = ORIGINAL_COLOR;\n        }\n    }\n\n    handleLength(event) {\n        let length = event.target.value;\n        length = length > LIMIT_LENGTH ? LIMIT_LENGTH : length;\n        this.setState({length: length});\n    }\n\n    handleSpeed(event) {\n        let speed = event.target.value;\n        this.setState({speed: speed});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.generateNewArray();\n    }\n\n    render() {\n        const {array} = this.state\n        const styles = {\n            input_style: {\n                width: \"20%\",\n                border: \"solid 0.2vw #ffc13b\",\n                fontSize: \"1.3vw\",\n                height: \"1.7vw\",\n                marginRight: \"0.3vw\",\n                marginLeft: \"0vw\",\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"nav-bar\">\n                    <div className=\"logo text\">Sorting Visualizer</div>\n                    <div className=\"generate-array-container\">\n                        <button className=\"flex-comp btn text\" onClick={() => this.generateNewArray()}>New Array</button>\n                        <button className=\"flex-comp btn text\" onClick={() => this.resetArray()}>Reset Array</button>\n                    </div>\n                    <div className=\"div-container\">\n                        <div className=\"dropdown\">\n                            <button className=\"btn text\">Algorithms &#x25BE;</button>\n                            <div className=\"dropdown-content\">\n                                <button className=\"btn-dropdown text-dropdown\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                                <button className=\"btn-dropdown text-dropdown\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                                <button className=\"btn-dropdown text-dropdown\" onClick={() => this.quickSort()}>Quick Sort</button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"div-container\">\n                        <div className=\"dropdown\">\n                            <button className=\"btn text\">Setting &#x25BE;</button>\n                            <div className=\"dropdown-content\">\n                                <form className=\"setting-form\" onSubmit={this.handleSubmit}>\n                                    <input style={styles.input_style} type=\"text\" value={this.state.length} onChange={this.handleLength}/>\n                                    <input className=\"btn-dropdown text-dropdown\" type=\"submit\" value=\"Set Length\"/>\n                                </form>\n                                <form className=\"setting-form\" onSubmit={this.handleSubmit}>\n                                    <input style={styles.input_style} type=\"text\" value={this.state.speed} onChange={this.handleSpeed}/>\n                                    <input className=\"btn-dropdown text-dropdown\" type=\"submit\" value=\"Set Speed\"/>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"array-container\">\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                                height: `${value/ARRAY_SCALE}vw`,\n                                backgroundColor: ORIGINAL_COLOR,\n                            }}>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"result-container text\">\n                    <h2>Time: {this.state.time_complexity}s</h2>\n                </div>\n            </div>\n        );\n    }\n  \n}\n\nfunction randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer></SortingVisualizer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}