{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.jsx","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimation","array","console","log","animations","mergeSort","length","response","pre","i","arraySorted","startIdx","endIdx","midIdx","Math","floor","j","k","helper","slice","push","merge","CONFIRM_COLOR","SECONDARY_COLOR","ORIGINAL_COLOR","SortingVisualizer","props","state","copy_array","speed","time_complexity","handleLength","bind","handleSpeed","handleSubmit","this","generateNewArray","setState","timestamp","Date","now","arrayBars","document","getElementsByClassName","idx","val","status","setTimeout","style","map","backgroundColor","idx_style","height","arr_len","tmp","getBubbleSortAnimation","barOneIdx","barTwoIdx","oneVal","twoVal","barOneStyle","barTwoStyle","min","max","random","resetColor","event","target","value","preventDefault","styles","input_style","width","border","fontSize","marginRight","marginLeft","className","onClick","resetArray","bubbleSort","quickSort","onSubmit","type","onChange","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6c096210.chunk.js","sourcesContent":["export function getBubbleSortAnimation(array) {\n    console.log('Start Bubble Sort!');\n    \n    let animations = [];\n    let arr_len = array.length;\n\n    for (let i = 0; i < arr_len; i++) {\n        for (let j = 0; j < arr_len - i - 1; j++) {\n            animations.push([j, j + 1, array[j], array[j + 1], 0]);\n\n            if (array[j] > array[j + 1]) {\n                let tmp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = tmp;\n            }\n        }\n        // Index of the confirm sorted element.\n        animations.push([arr_len - i - 1, 0, 0, 0, 1]);\n    }\n    return animations;\n}\n\nexport function getMergeSortAnimation(array) {\n    console.log('Start Merge Sort!');\n    let animations = []\n    \n    mergeSort(array, 0, array.length, animations)\n    const response = arraySorted(array) ? `Array is sorted!` : `Array not sorted!`;\n    console.log(response)\n    return animations\n}\n\nfunction mergeSort(array, startIdx, endIdx, animations) {\n    if (startIdx >= endIdx) return array;\n\n    const midIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSort(array, startIdx, midIdx, animations);\n    mergeSort(array, midIdx + 1, endIdx, animations);\n    merge(array, startIdx, midIdx, endIdx, animations);\n}\n\n// Animation show boundary\nconst SHOW_BOUNDARY = 0;\n// Animation show merging process \nconst MERGING = 1;\n\nfunction merge(array, startIdx, midIdx, endIdx, animations) {\n    let i = startIdx;\n    let j = midIdx + 1;\n    let k = 0;\n    let helper = array.slice(i, j);\n\n    animations.push([0, 0, startIdx, endIdx - 1, SHOW_BOUNDARY])\n    while (j <= endIdx && k < helper.length) {\n        if (helper[k] > array[j]) {\n            array[i] = array[j];\n            j++;\n        }\n        else {\n            array[i] = helper[k];\n            k++;\n        }\n        animations.push([i, array[i], 0, 0, MERGING])\n        i++;\n    }\n    while (j < endIdx) {\n        array[i] = array[j];\n        animations.push([i, array[i], 0, 0, MERGING])\n        i++;\n        j++;\n    }\n    while (k < helper.length) {\n        array[i] = helper[k];\n        animations.push([i, array[i], 0, 0, MERGING]);\n        i++;\n        k++;\n    }\n}\n\nfunction arraySorted(array) {\n    if (array.length <= 1) { return true; }\n    \n    let pre = array[0];\n\n    for (let i = 1; i < array.length; i++){\n        if (array[i] < pre) {return false;}\n        pre = array[i];\n    }\n    return true;\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\nimport { getMergeSortAnimation } from '../SortingAlgorithms/SortingAlgorithms.jsx';\n\n/* TODO:\n\n1. sorting time\n2. reset to origin array\n3. Change algorithms into drop-down list\n4. create setting drop-down list - set length, set speed.\n5. interrupt - stop, step, continue\n\n*/\n\n// Array Setting\nconst DEFAULT_LENGTH = 20;\nconst LIMIT_LENGTH = 150;\nconst ARRAY_SCALE = 12;\nconst RAND_MIN = 5;\nconst RAND_MAX = 400;\nconst DEFAULT_SPEED = 10;\n\n// Collor Setting\n// const PRIMARY_COLOR = \"#3537F2\";\nconst CONFIRM_COLOR = '#27AE60';\nconst SECONDARY_COLOR = \"#FFBF00\";\nconst ORIGINAL_COLOR = \"#6495ED\";\n\n// Merge Sort Parameter\nconst SHOW_BOUNDARY = 0;\nconst MERGING = 1;\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            array: [],\n            copy_array: [],\n            length: DEFAULT_LENGTH,\n            speed: DEFAULT_SPEED,\n            time_complexity: 0,\n        };\n        \n        this.handleLength = this.handleLength.bind(this);\n        this.handleSpeed = this.handleSpeed.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.generateNewArray();\n    }\n\n    componentWillUnmount() {\n        this.setState = () => false;\n    }\n\n    mergeSort(){\n        const timestamp = Date.now();\n        const animations = getMergeSortAnimation(this.state.array)\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [idx, val, startIdx, endIdx, status] = animations[i];\n\n\n            setTimeout(() => {\n                if (status === SHOW_BOUNDARY) {\n                    const start_style = arrayBars[startIdx].style;\n                    const end_style = arrayBars[endIdx].style;\n\n                    [start_style, end_style].map((style) => {\n                        return style.backgroundColor = SECONDARY_COLOR;\n                    })\n                    \n                }\n                else if (status === MERGING) {\n                    const idx_style = arrayBars[idx].style;\n\n                    idx_style.backgroundColor = CONFIRM_COLOR;\n                    idx_style.height = `${val/ARRAY_SCALE}vw`;\n                }\n            }, i * this.state.speed);\n        }\n\n        setTimeout(() => {\n            this.setState({time_complexity: (Date.now() - timestamp) / 1000})\n        }, animations.length * this.state.speed);\n    }\n\n    bubbleSort(){\n        const animations = getBubbleSortAnimation(this.state.array)\n        const timestamp = Date.now()\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [barOneIdx, barTwoIdx, oneVal, twoVal, finish] = animations[i];\n\n            if (finish === 1) {\n                const barOneStyle = arrayBars[barOneIdx].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = CONFIRM_COLOR;\n                }, i * this.state.speed);\n            }\n            else {\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = ORIGINAL_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                    \n                    if (oneVal > twoVal) {\n                        barOneStyle.height = `${twoVal/ARRAY_SCALE}vw`;\n                        barTwoStyle.height = `${oneVal/ARRAY_SCALE}vw`;\n                    }\n                }, i * this.state.speed);\n\n            }\n        }\n        setTimeout(() => {\n            this.setState({time_complexity: (Date.now() - timestamp) / 1000})\n        }, animations.length * this.state.speed);\n    }\n\n    quickSort(){}\n\n    generateNewArray() {\n        const array = []\n        for (let i = 0; i < this.state.length; i++) {\n            array.push(randomNum(RAND_MIN, RAND_MAX));\n        }\n        this.setState({array: array, copy_array: [...array], time_complexity: 0,});\n        this.resetColor();\n    }\n\n    resetArray() {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.height = `${this.state.copy_array[i]/ARRAY_SCALE}vw`;\n        }\n        this.setState({array: [...this.state.copy_array], time_complexity: 0,})\n        this.resetColor();\n    }\n\n    resetColor() {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = ORIGINAL_COLOR;\n        }\n    }\n\n    handleLength(event) {\n        let length = event.target.value;\n        length = length > LIMIT_LENGTH ? LIMIT_LENGTH : length;\n        this.setState({length: length});\n    }\n\n    handleSpeed(event) {\n        let speed = event.target.value;\n        this.setState({speed: speed});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.generateNewArray();\n    }\n\n    render() {\n        const {array} = this.state\n        const styles = {\n            input_style: {\n                width: \"20%\",\n                border: \"solid 0.2vw #ffc13b\",\n                fontSize: \"1.3vw\",\n                height: \"1.7vw\",\n                marginRight: \"0.3vw\",\n                marginLeft: \"0vw\",\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"nav-bar\">\n                    <div className=\"logo text\">Sorting Visualizer</div>\n                    <div className=\"generate-array-container\">\n                        <button className=\"flex-comp btn text\" onClick={() => this.generateNewArray()}>New Array</button>\n                        <button className=\"flex-comp btn text\" onClick={() => this.resetArray()}>Reset Array</button>\n                    </div>\n                    <div className=\"algo-container\">\n                        <div className=\"dropdown\">\n                            <button className=\"btn text\">Algorithms &#x25BE;</button>\n                            <div className=\"dropdown-content\">\n                                <button className=\"btn-dropdown text-dropdown\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                                <button className=\"btn-dropdown text-dropdown\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                                <button className=\"btn-dropdown text-dropdown\" onClick={() => this.quickSort()}>Quick Sort (To-do)</button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"setting-container\">\n                        <div className=\"dropdown\">\n                            <button className=\"btn text\">Setting &#x25BE;</button>\n                            <div className=\"dropdown-content\">\n                                <form className=\"setting-form\" onSubmit={this.handleSubmit}>\n                                    <input style={styles.input_style} type=\"text\" value={this.state.length} onChange={this.handleLength}/>\n                                    <input className=\"btn-dropdown text-dropdown\" type=\"submit\" value=\"Set Length\"/>\n                                </form>\n                                <form className=\"setting-form\" onSubmit={this.handleSubmit}>\n                                    <input style={styles.input_style} type=\"text\" value={this.state.speed} onChange={this.handleSpeed}/>\n                                    <input className=\"btn-dropdown text-dropdown\" type=\"submit\" value=\"Set Speed\"/>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"array-container\">\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                                height: `${value/ARRAY_SCALE}vw`,\n                                backgroundColor: ORIGINAL_COLOR,\n                            }}>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"result-container text\">\n                    <h2>Time: {this.state.time_complexity}s</h2>\n                    Result Container Placeholder\n                </div>\n            </div>\n        );\n    }\n  \n}\n\nfunction randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer></SortingVisualizer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}